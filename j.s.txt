
1. **config.js** - Contains constants and configuration
2. **storage.js** - Handles all localStorage operations
3. **utils.js** - Contains utility functions
4. **ui.js** - Handles UI updates and DOM manipulation
5. **main.js** - Main application logic that ties everything together

Here are the files:

### 1. config.js
```javascript
// Configuration constants
export const DAY_MS = 24 * 60 * 60 * 1000;
export const HOUR_8_MS = 8 * 60 * 60 * 1000;
export const HOUR_16_MS = 16 * 60 * 60 * 1000;
export const DEFAULT_CHANNEL = "https://youtube.com/channel/UCGSR_6RBF-sqhCbHzxKX3-g";
export const MAX_CLICKS = 100;
export const USER_LINK_LIMIT = 1;
export const YT_REGEX = /^https?:\/\/(www\.)?youtube\.com\/(@[a-zA-Z0-9_\-]+|channel\/[a-zA-Z0-9_\-]+)\/?$/;
```

### 2. storage.js
```javascript
import { DEFAULT_CHANNEL } from './config.js';

// Storage operations
export function loadLinks() {
    try {
        const raw = localStorage.getItem("channelLinks");
        return raw ? JSON.parse(raw) : [];
    } catch(e) {
        return [];
    }
}

export function loadBlocked() {
    try {
        const raw = localStorage.getItem("blockedLinks");
        return new Set(raw ? JSON.parse(raw) : []);
    } catch(e) {
        return new Set();
    }
}

export function loadUserLinks() {
    try {
        const raw = localStorage.getItem("userLinks");
        return new Set(raw ? JSON.parse(raw) : []);
    } catch(e) {
        return new Set();
    }
}

export function saveLinks(links) {
    localStorage.setItem("channelLinks", JSON.stringify(links));
}

export function saveBlocked(blocked) {
    localStorage.setItem("blockedLinks", JSON.stringify(Array.from(blocked)));
}

export function saveUserLinks(userLinks) {
    localStorage.setItem("userLinks", JSON.stringify(Array.from(userLinks)));
}

export function initDefaultChannel() {
    let defaultChannel = {
        url: DEFAULT_CHANNEL,
        clicks: 0,
        addedTime: Date.now(),
        isDefault: true,
        userAdded: false
    };

    if (!localStorage.getItem("channelLinks")) {
        saveLinks([defaultChannel]);
    }
}

export function ensureDefaultLink(links) {
    let idx = links.findIndex(l => l.url === DEFAULT_CHANNEL);
    let updatedLinks = [...links];
    
    if (idx === -1) {
        updatedLinks.unshift({
            url: DEFAULT_CHANNEL,
            clicks: 0,
            addedTime: Date.now(),
            isDefault: true,
            userAdded: false
        });
    } else if (idx !== 0) {
        const existing = updatedLinks.splice(idx, 1)[0];
        existing.isDefault = true;
        existing.userAdded = false;
        updatedLinks.unshift(existing);
    } else {
        updatedLinks[0].isDefault = true;
        updatedLinks[0].userAdded = false;
    }
    
    saveLinks(updatedLinks);
    return updatedLinks;
}
```

### 3. utils.js
```javascript
import { HOUR_8_MS, HOUR_16_MS, DAY_MS } from './config.js';

// Utility functions
export function getCountdownClass(addedTime, isDefault) {
    if (isDefault) return '';
    
    const elapsed = Date.now() - addedTime;
    if (elapsed < HOUR_8_MS) return "countdown-green";
    if (elapsed < HOUR_16_MS) return "countdown-yellow";
    return "countdown-red";
}

export function formatCountdown(addedTime, isDefault) {
    if (isDefault) return 'âˆž';
    
    let remaining = DAY_MS - (Date.now() - addedTime);
    if (remaining < 0) remaining = 0;
    const h = Math.floor(remaining / (1000 * 60 * 60));
    const m = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));
    const s = Math.floor((remaining % (1000 * 60)) / 1000);
    return `${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;
}

export function getStatusBadge(linkObj) {
    if (linkObj.isDefault) {
        return `<span class="badge badge-success">Always Active</span>`;
    } else if (linkObj.clicks >= 1) {
        return `<span class="badge badge-success">Subscribed</span>`;
    } else {
        return `<span class="badge badge-warning">Pending</span>`;
    }
}

export function checkExpiry(links, blocked, userLinks) {
    const now = Date.now();
    const nextLinks = [];
    const updatedBlocked = new Set(blocked);
    const updatedUserLinks = new Set(userLinks);
    
    links.forEach(l => {
        if (l.isDefault) {
            if (now - l.addedTime >= DAY_MS) {
                l.addedTime = Date.now();
            }
            nextLinks.push(l);
        } else if (now - l.addedTime < DAY_MS) {
            nextLinks.push(l);
        } else {
            updatedBlocked.add(l.url);
            if (l.userAdded) {
                updatedUserLinks.delete(l.url);
            }
        }
    });
    
    return { nextLinks, updatedBlocked, updatedUserLinks };
}
```

### 4. ui.js
```javascript
import { USER_LINK_LIMIT } from './config.js';
import { getStatusBadge, getCountdownClass, formatCountdown } from './utils.js';

// UI manipulation functions
export function displayLinks(links) {
    const tbody = document.querySelector("#linkTable tbody");
    tbody.innerHTML = "";
    
    if (links.length === 0) {
        tbody.innerHTML = `<tr><td colspan="6" class="text-center">No channels added yet</td></tr>`;
        return;
    }
    
    links.forEach((linkObj, index) => {
        const tr = document.createElement("tr");
        const countdownClass = getCountdownClass(linkObj.addedTime, linkObj.isDefault);
        
        tr.innerHTML = `
            <td>${index + 1}</td>
            <td><a href="${linkObj.url}" target="_blank" class="channel-link">${linkObj.url.replace(/^https?:\/\//, '')}</a></td>
            <td>${getStatusBadge(linkObj)}</td>
            <td class="${countdownClass}">${formatCountdown(linkObj.addedTime, linkObj.isDefault)}</td>
            <td>${linkObj.clicks}/${MAX_CLICKS}</td>
            <td>
                <button class="btn btn-sm" onclick="handleChannelClick(${index})" ${linkObj.clicks >= 1 ? 'disabled' : ''}>
                    ${linkObj.clicks >= 1 ? '<i class="fas fa-check"></i> Done' : '<i class="fas fa-external-link-alt"></i> Open'}
                </button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

export function updateUserProgress(userLinks) {
    const progress = (userLinks.size / USER_LINK_LIMIT) * 100;
    document.getElementById('userProgress').style.width = `${progress}%`;
    
    if (userLinks.size >= USER_LINK_LIMIT) {
        document.getElementById('addButton').disabled = true;
        document.getElementById('userLimitMessage').textContent = 'You have reached your link limit (1 link per user)';
        document.getElementById('userLimitMessage').style.color = '#dc3545';
    }
}

export function showSuccessMessage() {
    const successAlert = document.createElement('div');
    successAlert.className = 'alert alert-success';
    successAlert.innerHTML = '<i class="fas fa-check-circle"></i> Channel added successfully! Please subscribe to all channels in the list.';
    document.querySelector('.card').appendChild(successAlert);
    
    setTimeout(() => {
        successAlert.remove();
    }, 5000);
}
```

### 5. main.js
```javascript
import { 
    DAY_MS, DEFAULT_CHANNEL, MAX_CLICKS, 
    USER_LINK_LIMIT, YT_REGEX 
} from './config.js';
import { 
    loadLinks, loadBlocked, loadUserLinks, 
    saveLinks, saveBlocked, saveUserLinks,
    initDefaultChannel, ensureDefaultLink
} from './storage.js';
import { 
    checkExpiry, getStatusBadge, 
    getCountdownClass, formatCountdown 
} from './utils.js';
import { 
    displayLinks, updateUserProgress, 
    showSuccessMessage 
} from './ui.js';

// Main application state
let links = loadLinks();
let blocked = loadBlocked();
let userLinks = loadUserLinks();

// Initialize the app
function init() {
    initDefaultChannel();
    links = loadLinks();
    blocked = loadBlocked();
    userLinks = loadUserLinks();
    links = ensureDefaultLink(links);
    
    const { nextLinks, updatedBlocked, updatedUserLinks } = checkExpiry(links, blocked, userLinks);
    links = nextLinks;
    blocked = updatedBlocked;
    userLinks = updatedUserLinks;
    
    saveLinks(links);
    saveBlocked(blocked);
    saveUserLinks(userLinks);
    
    displayLinks(links);
    updateUserProgress(userLinks);
    
    // Update countdown every second
    setInterval(() => {
        const { nextLinks, updatedBlocked, updatedUserLinks } = checkExpiry(links, blocked, userLinks);
        links = nextLinks;
        blocked = updatedBlocked;
        userLinks = updatedUserLinks;
        
        saveLinks(links);
        saveBlocked(blocked);
        saveUserLinks(userLinks);
        
        displayLinks(links);
    }, 1000);
}

// Expose functions to window
window.addLink = function() {
    if (userLinks.size >= USER_LINK_LIMIT) {
        alert("You can only add one channel link per user.");
        return;
    }

    const inputEl = document.getElementById("channelLink");
    const linkInput = (inputEl.value || "").trim();

    if (!YT_REGEX.test(linkInput)) {
        alert("Please enter a valid YouTube channel link in the format:\n\nhttps://youtube.com/channel/...\nor\nhttps://youtube.com/@username");
        return;
    }
    if (linkInput === DEFAULT_CHANNEL) {
        alert("This is the default channel link and cannot be added.");
        return;
    }
    if (blocked.has(linkInput)) {
        alert("This link was already used and cannot be added again.");
        return;
    }
    if (links.some(l => l.url === linkInput)) {
        alert("This channel link has already been added.");
        return;
    }

    links.push({ 
        url: linkInput, 
        clicks: 0, 
        addedTime: Date.now(), 
        isDefault: false,
        userAdded: true
    });
    
    userLinks.add(linkInput);
    saveLinks(links);
    saveUserLinks(userLinks);
    displayLinks(links);
    updateUserProgress(userLinks);
    inputEl.value = "";
    
    showSuccessMessage();
};

window.handleChannelClick = function(index) {
    if (!links[index]) return;

    // Prevent multiple clicks on the same link
    if (links[index].clicks >= 1 && !links[index].isDefault) {
        alert("You can only click this link once.");
        return;
    }

    links[index].clicks++;
    
    // For non-default links, block after one click
    if (!links[index].isDefault && links[index].clicks >= 1) {
        blocked.add(links[index].url);
    }

    saveLinks(links);
    saveBlocked(blocked);
    displayLinks(links);
    window.open(links[index].url, "_blank");
};

window.clearLinks = function() {
    if (confirm("Are you sure you want to clear all channel links? This cannot be undone.")) {
        // Keep only the default channel
        links = links.filter(l => l.isDefault);
        // Clear user links
        userLinks.clear();
        saveLinks(links);
        saveUserLinks(userLinks);
        displayLinks(links);
        updateUserProgress(userLinks);
    }
};

// Start the application
init();
```

### style.css
```css
/* This would contain all the CSS from the style tag in the HTML */
:root {
    --primary: #ff0000;
    --primary-dark: #cc0000;
    --secondary: #282828;
    --light: #f8f9fa;
    --dark: #212529;
    --warning-bg: #fff3cd;
    --warning-border: #ffeeba;
    --warning-text: #856404;
    --success-bg: #d4edda;
    --success-border: #c3e6cb;
    --success-text: #155724;
    --danger-bg: #f8d7da;
    --danger-border: #f5c6cb;
    --danger-text: #721c24;
    --info-bg: #d1ecf1;
    --info-border: #bee5eb;
    --info-text: #0c5460;
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--dark);
    background-color: #f5f5f5;
    padding: 0;
    margin: 0;
}

.container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
}

header {
    background-color: var(--primary);
    color: white;
    padding: 20px 0;
    text-align: center;
    margin-bottom: 30px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

h1 {
    font-size: 2.2rem;
    margin-bottom: 10px;
}

.subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
}

.card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
    padding: 25px;
    margin-bottom: 25px;
}

.alert {
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 20px;
    border-left: 5px solid;
}

.alert-warning {
    background-color: var(--warning-bg);
    border-color: var(--warning-border);
    color: var(--warning-text);
}

.alert-danger {
    background-color: var(--danger-bg);
    border-color: var(--danger-border);
    color: var(--danger-text);
}

.alert-info {
    background-color: var(--info-bg);
    border-color: var(--info-border);
    color: var(--info-text);
}

.alert-success {
    background-color: var(--success-bg);
    border-color: var(--success-border);
    color: var(--success-text);
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
}

input[type="url"] {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 16px;
    transition: border 0.3s;
}

input[type="url"]:focus {
    border-color: var(--primary);
    outline: none;
    box-shadow: 0 0 0 3px rgba(255, 0, 0, 0.1);
}

.btn {
    display: inline-block;
    padding: 12px 24px;
    background-color: var(--primary);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    text-align: center;
    transition: all 0.3s;
}

.btn:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
}

.btn-block {
    display: block;
    width: 100%;
}

.btn-outline {
    background-color: transparent;
    border: 2px solid var(--primary);
    color: var(--primary);
}

.btn-outline:hover {
    background-color: var(--primary);
    color: white;
}

.btn-sm {
    padding: 8px 16px;
    font-size: 14px;
}

.btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
    transform: none;
}

.table-responsive {
    overflow-x: auto;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

th, td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: var(--primary);
    color: white;
    font-weight: 600;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

tr:hover {
    background-color: #f1f1f1;
}

.badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
}

.badge-success {
    background-color: var(--success-bg);
    color: var(--success-text);
}

.badge-warning {
    background-color: var(--warning-bg);
    color: var(--warning-text);
}

.badge-danger {
    background-color: var(--danger-bg);
    color: var(--danger-text